import kotlin.Float;
import kotlin.Int;
import kotlinx.datetime.Instant;

-- Table Creation

CREATE TABLE ExerciseEntity (
    id TEXT PRIMARY KEY NOT NULL,
    name TEXT NOT NULL,
    one_rep_max REAL AS Float,
    last_modified TEXT AS Instant NOT NULL,
    last_synced TEXT AS Instant
);

CREATE TABLE RoutineEntity (
    id TEXT PRIMARY KEY NOT NULL,
    sort_order INTEGER AS Int NOT NULL,
    name TEXT NOT NULL,
    last_modified TEXT AS Instant NOT NULL,
    last_synced TEXT AS Instant
);

CREATE TABLE RoutineExerciseEntity (
     id TEXT PRIMARY KEY NOT NULL,
     sort_order INTEGER AS Int NOT NULL,
     sets INTEGER AS Int NOT NULL,
     reps INTEGER AS Int NOT NULL,
     percent_one_rep_max REAL AS Float,
     weight REAL AS Float,
     routineId TEXT NOT NULL,
     exerciseId TEXT NOT NULL,
     last_modified TEXT AS Instant NOT NULL,
     last_synced TEXT AS Instant,
     FOREIGN KEY (routineId) REFERENCES RoutineEntity(id),
     FOREIGN KEY (exerciseId) REFERENCES ExerciseEntity(id)
);

CREATE TABLE SessionEntity (
    id TEXT PRIMARY KEY NOT NULL,
    startDate TEXT AS Instant NOT NULL,
    endDate TEXT AS Instant,
    routineId TEXT NOT NULL,
    currentExerciseId TEXT,
    last_modified TEXT AS Instant NOT NULL,
    last_synced TEXT AS Instant,
    FOREIGN KEY (routineId) REFERENCES RoutineEntity(id)
);

CREATE TABLE SessionExerciseEntity (
    id TEXT PRIMARY KEY NOT NULL,
    sets INTEGER AS Int,
    reps INTEGER AS Int,
    weight REAL AS Float,
    sessionId TEXT NOT NULL,
    routineExerciseId TEXT NOT NULL,
    currentSet INTEGER AS Int NOT NULL DEFAULT 0,
    endDate TEXT AS Instant,
    last_modified TEXT AS Instant NOT NULL,
    last_synced TEXT AS Instant,
    FOREIGN KEY (sessionId) REFERENCES SessionEntity(id) ON DELETE CASCADE,
    FOREIGN KEY (routineExerciseId) REFERENCES RoutineExerciseEntity(id)
);

CREATE TABLE RunSessionEntity (
    id TEXT PRIMARY KEY NOT NULL,
    startDate TEXT AS Instant NOT NULL,
    endDate TEXT AS Instant,
    last_modified TEXT AS Instant NOT NULL,
    last_synced TEXT AS Instant
);

CREATE TABLE RunSessionLocationEntity (
    id TEXT PRIMARY KEY NOT NULL,
    sessionId TEXT NOT NULL REFERENCES RunSessionEntity(id),
    latitude REAL NOT NULL,
    longitude REAL NOT NULL,
    timestamp TEXT AS Instant NOT NULL,
    last_modified TEXT AS Instant NOT NULL,
    last_synced TEXT AS Instant
);

-- Queries

-- Exercises
selectAllExercises:
SELECT *
FROM ExerciseEntity;

selectExercise:
SELECT *
FROM ExerciseEntity
WHERE id = ?
LIMIT 1;

selectExercisesToSync:
SELECT *
FROM ExerciseEntity
WHERE last_synced IS NULL OR last_modified > last_synced;

selectLastSyncedExerciseInstant:
SELECT last_synced
FROM ExerciseEntity
ORDER BY last_synced DESC
LIMIT 1;

select:
SELECT AVG(CAST(:BAR AS INTEGER));

updateExerciseLastSynced:
UPDATE ExerciseEntity
SET last_synced = ?
WHERE id IN ?;

upsertExercise:
INSERT INTO ExerciseEntity (id, name, one_rep_max, last_modified, last_synced)
VALUES (?, ?, ?, ?, ?)
ON CONFLICT(id) DO UPDATE SET
  name = excluded.name,
  one_rep_max = excluded.one_rep_max,
  last_modified = excluded.last_modified,
  last_synced = excluded.last_synced;

updateExerciseOneRepMax:
UPDATE ExerciseEntity
SET one_rep_max = :oneRepMax
WHERE id = :exerciseId;

-- Routines

selectAllRoutines:
SELECT *
FROM RoutineEntity
ORDER BY sort_order;

selectRoutines:
SELECT *
FROM RoutineEntity
WHERE id IN :routineIds
ORDER BY sort_order;

selectRoutinesToSync:
SELECT *
FROM RoutineEntity
WHERE last_synced IS NULL OR last_modified > last_synced;

selectRoutine:
SELECT *
FROM RoutineEntity
WHERE id = :routineId
LIMIT 1;

selectLastSyncedRoutineInstant:
SELECT last_synced
FROM RoutineEntity
ORDER BY last_synced DESC
LIMIT 1;

upsertRoutine:
INSERT INTO RoutineEntity (id, sort_order, name, last_modified,  last_synced)
VALUES (?, ?, ?,  ?, ?)
ON CONFLICT(id) DO UPDATE SET
  sort_order = excluded.sort_order,
  name = excluded.name,
  last_modified = excluded.last_modified,
  last_synced = excluded.last_synced;

updateRoutineLastSynced:
UPDATE RoutineEntity
SET last_synced = ?
WHERE id IN ?;

-- Routine Exercises

selectAllRoutineExercises:
SELECT *
FROM RoutineExerciseEntity
ORDER BY sort_order;

selectRoutineExercises:
SELECT *
FROM RoutineExerciseEntity
WHERE routineId IN :routineIds
ORDER BY sort_order;

selectRoutineExercise:
SELECT *
FROM RoutineExerciseEntity
WHERE id = :routineExerciseId
LIMIT 1;

selectRoutineExercisesToSync:
SELECT *
FROM RoutineExerciseEntity
WHERE last_synced IS NULL OR last_modified > last_synced;

selectLastSyncedRoutineExerciseInstant:
SELECT last_synced
FROM RoutineExerciseEntity
ORDER BY last_synced DESC
LIMIT 1;

updateRoutineExerciseWeight:
UPDATE RoutineExerciseEntity
SET weight = :weight
WHERE id = :routineExerciseId;

updateRoutineExercisePercentOneRepMax:
UPDATE RoutineExerciseEntity
SET percent_one_rep_max = :percentOneRepMax
WHERE id = :routineExerciseId;

updateRoutineExerciseLastSynced:
UPDATE RoutineExerciseEntity
SET last_synced = ?
WHERE id IN ?;

upsertRoutineExercise:
INSERT INTO RoutineExerciseEntity (id, sort_order, sets, reps, percent_one_rep_max, weight, routineId, exerciseId, last_modified, last_synced)
VALUES (?, ?, ?, ?, ?, ? ,?, ?, ?, ?)
ON CONFLICT(id) DO UPDATE SET
  sort_order = excluded.sort_order,
  sets = excluded.sets,
  reps = excluded.reps,
  percent_one_rep_max = excluded.percent_one_rep_max,
  weight = excluded.weight,
  routineId = excluded.routineId,
  exerciseId = excluded.exerciseId,
  last_modified = excluded.last_modified,
  last_synced = excluded.last_synced;

-- Sessions

upsertSession:
INSERT INTO SessionEntity(id, startDate, endDate, routineId, last_modified, last_synced)
VALUES (?, ?, ?, ?, ?, ?)
ON CONFLICT(id) DO UPDATE SET
  startDate = excluded.startDate,
  endDate = excluded.endDate,
  routineId = excluded.routineId,
  last_modified = excluded.last_modified,
  last_synced = excluded.last_synced;

selectAllSessions:
SELECT *
FROM SessionEntity
ORDER BY startDate DESC;

selectSessions:
SELECT *
FROM SessionEntity
WHERE id IN :sessionIds
ORDER BY startDate DESC;

selectSession:
SELECT *
FROM SessionEntity
WHERE id = :sessionId
LIMIT 1;

selectSessionsToSync:
SELECT *
FROM SessionEntity
WHERE last_synced IS NULL OR last_modified > last_synced;

selectSessionsForRoutine:
SELECT *
FROM SessionEntity
WHERE routineId = :routineId
ORDER BY startDate DESC;

selectLastSyncedSessionInstant:
SELECT last_synced
FROM SessionEntity
ORDER BY last_synced DESC
LIMIT 1;

updateSession:
UPDATE SessionEntity
SET currentExerciseId = :currentExerciseId, endDate = :endDate
WHERE id = :sessionId;

updateSessionLastSynced:
UPDATE SessionEntity
SET last_synced = ?
WHERE id IN ?;

deleteSession:
DELETE FROM SessionEntity
WHERE id = :sessionId;

-- Session Exercises

selectAllSessionExercises:
SELECT *
FROM SessionExerciseEntity;

selectSessionExercises:
SELECT *
FROM SessionExerciseEntity
WHERE sessionId IN :sessionIds;

selectSessionExercise:
SELECT *
FROM SessionExerciseEntity
WHERE id = :sessionId
LIMIT 1;

selectSessionExercisesToSync:
SELECT *
FROM SessionExerciseEntity
WHERE last_synced IS NULL OR last_modified > last_synced;

upsertSessionExercise:
INSERT INTO SessionExerciseEntity(id, sets, reps, weight, sessionId, routineExerciseId, last_modified, last_synced)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
ON CONFLICT(id) DO UPDATE SET
  sets = excluded.sets,
  reps = excluded.reps,
  weight = excluded.weight,
  sessionId = excluded.sessionId,
  routineExerciseId = excluded.routineExerciseId,
  last_modified = excluded.last_modified,
  last_synced = excluded.last_synced;

selectLastSyncedSessionExerciseInstant:
SELECT last_synced
FROM SessionExerciseEntity
ORDER BY last_synced DESC
LIMIT 1;

deleteExercisesForSession:
DELETE FROM SessionExerciseEntity
WHERE sessionId = :sessionId;

updateSessionExercise:
UPDATE SessionExerciseEntity
SET currentSet = :currentSet, endDate = :endDate, weight = :weight
WHERE id = :sessionExerciseId;

updateSessionExerciseLastSynced:
UPDATE SessionExerciseEntity
SET last_synced = ?
WHERE id IN ?;

-- Running

-- Insert a new running session and return its ID.
insertRunSession:
INSERT INTO RunSessionEntity(id, startDate, endDate, last_modified)
VALUES (?, ?,  ?, ?);

-- Update the end date of a running session.
updateEndDate:
UPDATE RunSessionEntity
SET endDate = :endDate
WHERE id = :id;

-- Insert a new location for a session.
insertLocation:
INSERT INTO RunSessionLocationEntity (id, sessionId, latitude, longitude, timestamp, last_modified)
VALUES (?, ?, ?, ?, ?, ?);

-- Get all locations for a specific session.
getLocationsForRunSession:
SELECT * FROM RunSessionLocationEntity
WHERE sessionId = :sessionId
ORDER BY timestamp ASC;

-- Get the running session by ID.
getRunSession:
SELECT * FROM RunSessionEntity
WHERE id = :id;